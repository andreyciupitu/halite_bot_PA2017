# halite_bot_PA2017
Halite Bot - PA 2017 Project

Echipa: 202
Membri: Stefan Adrian-Cosmin, 322CC
        State Nicolae, 323CC
        Cochilet Serban-Bogdan, 323CC
        Ciupitu Andrei-Valentin, 322CC - capitan

========== Mod de compilare ====================================================

Compilarea se face din linia de comanda, folosind Makefile-ul, sursele si
header-ele se afla in folderul src, iar executabilul se afla in folderul curent.

Comanda de testare: "./202.exe"

========== Surse de inspiratie =================================================

Am pornit implementarea de la tutorialele de pe site-ul jocului si de pe forum:
[1] - https://halite.io/basics_improve_random.php
[2] - http://forums.halite.io/t/so-youve-improved-the-random-bot-now-what/482
[3] - http://forums.halite.io/t/early-mid-and-late-game/703

In plus, am analizat si strategiile folosite de alti jucatori:
[4] - https://halite.io/leaderboard.php

========== Detalii de implementare =============================================

Implementarea efectiva a botului este facuta in clasa Player. Botul aplica
strategia urmatoare:
    - Casutele din interiorul terenului ocupat vor cauta cea mai apropiata
    granita, iar daca aceasta nu exista vor merge in mod implicit in directia
    SOUTH.
    - Casutele de la granita folosesc o abordare greedy pentru a ataca piesele
    neocupate. Astfel, o piesa va ataca de indata ce este posibil, iar daca
    exista mai multe casute ce pot fi atacate, atunci va fi aleasa piesa cu cel
    mai mare scor.
    - Daca o casuta de granita nu poate ataca, atunci ea va cauta o casuta de
    granita vecina cu care sa se combine, fara a face OVERFLOW. Pentru aceasta
    este tinuta o matrice cu puterile casutelor.

Adaugari pentru ETAPA 2:
    - Euristica a fost modficata, dupa modelul de la linkul [2], casutele
    de granita prioritizand acum casutele cele mai vulnerabile ale inamicului.
    Etapa de expansion a ramas nemodificata.
    - Am adaugat o metoda de corectie a pierderii de putere folosind urmatorul
    algoritm:
        Se retin puterile in directiile pentru fiecare casuta in 2 matrici
        auxiliare.
        Dupa ce s-a asignat cate o mutare pentru fiecare piesa, gaseste toate
        piesele care au puterea peste 255. Daca o piesa este
        STILL mut-o in directia unei piese care intra in acea casuta. Altfel,
        redirecteaza una din piesele care intra in acea casuta. Redirectarea
        se va face la stanga sau la dreapta, astfel incat sa se minimizeze
        pierderea de putere (O mutare in directia opusa ar fi inutila, deoarece
        este in opozitie cu traseul ales pentru acea piesa).
        Algoritmul se repeta pana cand nu se mai pot face corectari.

ETAPA 3:
    Nu am facut modficari suplimentare.

Determinarea unei mutari se va face in timp constant O(1) pentru casutele
de granita, iar pentru o casuta interioara se va face in O(height). Corectia
puterii se face in O((width * height) ^ 2).

Complexitatea totala a algoritmului folosit va fi asadar O((width * height) ^ 2)

========== Credits =============================================================

App design(organizarea codului) - Andrei Ciupitu
Research & Strategie - Andrei Ciupitu, State Nicolae & Stefan Adrian
Algoritmul utilizat - Toti
Implementare - Stefan Adrian & Serban Cochilet
